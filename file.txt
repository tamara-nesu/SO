void list_treasures(const char *hunt_id, FILE *out) {
    if (!hunt_id) {
        fprintf(out, "Missing hunt ID\n");
        return;
    }

    char path[256];
    snprintf(path, sizeof(path), "%s/treasures.dat", hunt_id);
    int fd = open(path, O_RDONLY);
    if (fd < 0) {
        fprintf(out, "Cannot open treasures.dat for hunt '%s'\n", hunt_id);
        return;
    }

    Treasure t;
    fprintf(out, "Treasures in hunt '%s':\n", hunt_id);
    while (read(fd, &t, sizeof(Treasure)) == sizeof(Treasure)) {
        fprintf(out, "ID: %s | User: %s | Lat: %.2f | Lon: %.2f | Value: %d\n",
                t.id, t.username, t.latitude, t.longitude, t.value);
    }
    close(fd);
}


void view_treasure(const char *hunt_id, const char *treasure_id, FILE *out) {
    if (!hunt_id || !treasure_id) {
        fprintf(out, "Missing hunt ID or treasure ID\n");
        return;
    }

    char path[256];
    snprintf(path, sizeof(path), "%s/treasures.dat", hunt_id);
    int fd = open(path, O_RDONLY);
    if (fd < 0) {
        fprintf(out, "Cannot open treasures.dat for hunt '%s'\n", hunt_id);
        return;
    }

    Treasure t;
    int found = 0;
    while (read(fd, &t, sizeof(Treasure)) == sizeof(Treasure)) {
        if (strcmp(t.id, treasure_id) == 0) {
            fprintf(out, "=== Treasure Details ===\n");
            fprintf(out, "ID: %s\nUser: %s\nLat: %.2f\nLon: %.2f\nClue: %s\nValue: %d\n",
                    t.id, t.username, t.latitude, t.longitude, t.clue, t.value);
            found = 1;
            break;
        }
    }
    if (!found) {
        fprintf(out, "Treasure ID '%s' not found in hunt '%s'\n", treasure_id, hunt_id);
    }
    close(fd);
}
